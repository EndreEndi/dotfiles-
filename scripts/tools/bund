#!/bin/bash

bundle_name="bund"
input_2="$2"
input_3="$3"
input_4="$4"
input_5="$5"

resize_for_phone(){
	mogrify -path ./ -write resized-$input_2 -resize 720x1560^ -gravity Center -extent 720x1560 ./$input_2
}

image_to_clipboard() { 
	xclip -selection clipboard -t image/$(file --extension $input_2 | sed -n 's/^.*:\ //p') -i $input_2
}

weather() {
	if [[ "$input_2" = "" ]]; then
		curl -H "Accept-Language: tr" wttr.in
	else
		curl -H "Accept-Language: tr" wttr.in/$input_2
	fi
}

colors_match() {
	T='ABC'   # The text for the color test

	echo -e "\n         def     40m     41m     42m     43m     44m     45m     46m     47m";

	for FGs in '    m' '   1m' '  30m' '1;90m' '  31m' '1;91m' '  32m' \
		'1;92m' '  33m' '1;93m' '  34m' '1;94m' '  35m' '1;95m' \
		'  36m' '1;96m' '  37m' '1;97m';

do FG=${FGs// /}
	echo -en " $FGs \033[$FG  $T  "

	for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
	do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
	done
	echo;
done
echo
}

colors() {
	f=3 b=4
	for j in f b; do
		for i in {0..7}; do
			printf -v $j$i %b "\e[${!j}${i}m"
		done
	done

	for i in {0..7}; do
		printf -v fbright$i %b "\e[9${i}m"
	done

	d=$'\e[1m'
	t=$'\e[0m'
	v=$'\e[7m'


printf "
$f1███$d$fbright$fbright1▄$t  $f2███$d$fbright$fbright2▄$t  $f3███$d$fbright3▄$t  $f4███$d$fbright4▄$t  $f5███$d$fbright5▄$t  $f6███$d$fbright6▄$t  $f7███$d$fbright7▄$t  
$f1███$d$fbright$fbright1█$t  $f2███$d$fbright$fbright2█$t  $f3███$d$fbright3█$t  $f4███$d$fbright4█$t  $f5███$d$fbright5█$t  $f6███$d$fbright6█$t  $f7███$d$fbright7█$t  
$f1███$d$fbright$fbright1█$t  $f2███$d$fbright$fbright2█$t  $f3███$d$fbright3█$t  $f4███$d$fbright4█$t  $f5███$d$fbright5█$t  $f6███$d$fbright6█$t  $f7███$d$fbright7█$t  
$d$fbright1 ▀▀▀   $fbright2▀▀▀   $fbright3▀▀▀   $fbright4▀▀▀   $fbright5▀▀▀   $fbright6▀▀▀   $fbright7▀▀▀
"

}

polybar_toggle(){
	if [ ! -f "/tmp/polybar_toggle.dat" ] ; then
		polybar_toggle=1
		echo "${polybar_toggle}" > /tmp/polybar_toggle.dat
	else
		polybar_toggle=`cat /tmp/polybar_toggle.dat`
	fi

	if [[ $polybar_toggle -eq 1 ]]
	then
		polybar-msg cmd hide
		bspc config bottom_padding 0
		bspc config top_padding 0
		polybar_toggle=0
	else
		polybar-msg cmd show
		$(grep top_padding "$XDG_CONFIG_HOME/bspwm/bspwmrc")
		$(grep bottom_padding "$XDG_CONFIG_HOME/bspwm/bspwmrc")
		polybar_toggle=1
	fi

	echo "${polybar_toggle}" > /tmp/polybar_toggle.dat

}

powersave(){
	if killall picom
	then
		printf '%b\n' "\e[1;31m[*] \e[0mKilled picom."
	fi

	if killall polybar
	then
		printf '%b\n' "\e[1;31m[*] \e[0mKilled polybar."
	fi

	if bspc config bottom_padding 0
	then
		printf '%b\n' "\e[1;31m[*] \e[0mChanged the bspwm padding."
	fi

	if xbacklight -set 40
	then
		printf '%b\n' "\e[1;33m[-] \e[0mDecreased the brightness."
	fi	
}

solid_wallpaper() {

	if [[ $input_3 == "" ]]; then
		color_code=$(hexdump -n 3 -v -e '"#" 3/1 "%02X" "\n"' /dev/urandom)
	else
		color_code=$input_3
	fi

	case $input_2 in
		pc) convert -size 1920x1080 canvas:"$color_code" ./.wallpaper.png ;;
		phone) 	convert -size 720x1560 canvas:"$color_code" ./wallpaper.png ;;
		*) printf '%b\n' "\e[31m! \e[0myou missed some arguments.\n\e[1musage:\e[0m $bundle_name -W pc #colorcode"
	esac
}

searchforword() { grep --color=auto -rnw "$input_2" -e "$input_3"; }

ffsend_qr() {
	if qrencode --foreground=000000 --background=ffffff -l M -s 20 -o /tmp/lastqr.png $(ffsend upload -c -q "$input_2")
	then
		feh --scale-down --image-bg=\#ffffff /tmp/lastqr.png
	elif [[ $(command -v qrencode) = "" ]]
	then
		printf '\n%b\n\n' "\e[31mhata: \e[0mqrencode paketini yükle."
	else
		feh --scale-down --image-bg=\#ffffff /tmp/lastqr.png > /dev/null 2>&1
	fi


}


forest_invitation(){

	declare -a emoji_list
	emoji_list=(\
		"bamboo" \
		"cherry_blossom" \
		"christmas_tree" \
		"ear_of_rice" \
		"fallen_leaf" \
		"feather" \
		"four_leaf_clover" \
		"herb" \
		"hibiscus" \
		"leaves" \
		"lobster" \
		"maple_leaf" \
		"mushroom" \
		"palm_tree" \
		"shell" \
		"tanabata_tree" \
		"wood" \
	)

	rand=$[$RANDOM % ${#emoji_list[@]}]
	emoji=${emoji_list[$rand]}

	
	if [[ $input_3 == "auto" ]]; then

			adb exec-out screencap -p > .screen.png
			convert .screen.png -colorspace Gray .screen.png
			convert .screen.png -negate .screen.png
			tesseract .screen.png .ocr -l eng
			forest_code=$(cat ./.ocr.txt | grep "Room Code" | cut -d " " -f 3)
	else
		forest_code=$input_3
	fi

	if [[ $input_4 == "" ]]; then
		duration=60
	else 
		duration=$input_4
	fi

	if [[ $input_5 == "" ]]; then
		starting=10
	else 
		starting=$input_5
	fi

	text=":$emoji: **$input_2** :$emoji:
:$emoji: **Duration:** $duration minutes
:$emoji: **Starting in:** $starting minutes ($(date -d "now $starting minutes" +'XX:%M'))
:$emoji: **Code:** $forest_code
:$emoji: **Link:** https://forestapp.cc/join-room?token=$forest_code
:$emoji: *React with anything if joining*
:$emoji: *React with :1812_wutcat: for ping*"
	
	printf '%b\n\n' "Here is your invitation text:" 
	printf '%b\n' "$text"

	echo "$text" | xclip -sel clip

	[[ -f ./.screen.png ]] && rm ./.screen.png 
	[[ -f ./.ocr.txt ]] && rm ./.ocr.txt
}

print_usage(){
	printf '\n%b\n' "  \e[1mBUNDLE OF OFTUSED TOOLS\e[0m"

	printf '\n%b\n' "\e[1mINFO COMMANDS\e[0m"
	printf '%b\n' "  $bundle_name {-C --colors2}                                        show colors in different backgrounds"
	printf '%b\n' "  $bundle_name {-c --colors}                                         show colors"
	printf '%b\n' "  $bundle_name {-h --help}                                           print this message"
	printf '%b\n' "  $bundle_name {-w --weather} <city>                                 show the weather for the specified city"

	printf '\n%b\n' "\e[1mACTION COMMANDS\e[0m"

	printf '%b\n' "  $bundle_name {-F --forest} [tree] auto/<code> <duration> <starts>  create forest invitation"
	printf '%b\n' "  $bundle_name {-P --powersave}                                      turn on the power saving mode"
	printf '%b\n' "  $bundle_name {-f --ffsend}                                         ffsend qr"
	printf '%b\n' "  $bundle_name {-s --search-for-word} [path] [word]                  toggle polybar"
	printf '%b\n' "  $bundle_name {-t --polybar-toggle}                                 toggle polybar"

	printf '\n%b\n' "\e[1mIMAGE COMMANDS\e[0m"
	printf '%b\n' "  $bundle_name {-W --solid--wallpaper} [pc/phone] <hex>              make a single color wallpaper "
	printf '%b\n' "                                                             (random color if hex is empty)"
	printf '%b\n' "  $bundle_name {-i --image-to-clipboard}                             pipe an image to clipboard"
	printf '%b\n\n' "  $bundle_name {-p --wrff}                                           resize an image for 1560x720 screens"
	exit 1
}

case $1 in
	--colors | -c) colors ;;
	--colors2 | -C) colors_match ;;
	--ffsend | -f) ffsend_qr ;;
	--forest | -F) forest_invitation;;
	--image-to-clipboard | -i) image_to_clipboard ;;
	--polybar-toggle | -t) polybar_toggle ;;
	--powersave | -P) powersave ;;
	--search-for-word | -s) searchforword ;;
	--solid-wallpaper | -W) solid_wallpaper ;;
	--weather | -w) weather ;;
	--wrff | -p) resize_for_phone ;;
	*) print_usage ;;
esac

